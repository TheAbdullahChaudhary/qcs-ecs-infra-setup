version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: ecs-db
    environment:
      POSTGRES_DB: ecsdb
      POSTGRES_USER: ecsuser
      POSTGRES_PASSWORD: ecspassword
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecs-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecsuser -d ecsdb"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API
  backend:
    build: ./backend
    container_name: ecs-backend
    environment:
      NODE_ENV: development
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_DB: ecsdb
      POSTGRES_USER: ecsuser
      POSTGRES_PASSWORD: ecspassword
    ports:
      - "4000:4000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ecs-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App
  frontend:
    build: ./frontend
    container_name: ecs-frontend
    environment:
      REACT_APP_API_URL: /api
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ecs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local

networks:
  ecs-network:
    driver: bridge 